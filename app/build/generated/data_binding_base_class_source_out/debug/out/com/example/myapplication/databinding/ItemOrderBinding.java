// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView orderAmountText;

  @NonNull
  public final TextView orderDateText;

  @NonNull
  public final ImageView orderImage;

  @NonNull
  public final TextView orderMenuText;

  @NonNull
  public final TextView storeNameText;

  @NonNull
  public final TextView tvOrderName;

  private ItemOrderBinding(@NonNull LinearLayout rootView, @NonNull TextView orderAmountText,
      @NonNull TextView orderDateText, @NonNull ImageView orderImage,
      @NonNull TextView orderMenuText, @NonNull TextView storeNameText,
      @NonNull TextView tvOrderName) {
    this.rootView = rootView;
    this.orderAmountText = orderAmountText;
    this.orderDateText = orderDateText;
    this.orderImage = orderImage;
    this.orderMenuText = orderMenuText;
    this.storeNameText = storeNameText;
    this.tvOrderName = tvOrderName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.orderAmountText;
      TextView orderAmountText = ViewBindings.findChildViewById(rootView, id);
      if (orderAmountText == null) {
        break missingId;
      }

      id = R.id.orderDateText;
      TextView orderDateText = ViewBindings.findChildViewById(rootView, id);
      if (orderDateText == null) {
        break missingId;
      }

      id = R.id.orderImage;
      ImageView orderImage = ViewBindings.findChildViewById(rootView, id);
      if (orderImage == null) {
        break missingId;
      }

      id = R.id.orderMenuText;
      TextView orderMenuText = ViewBindings.findChildViewById(rootView, id);
      if (orderMenuText == null) {
        break missingId;
      }

      id = R.id.storeNameText;
      TextView storeNameText = ViewBindings.findChildViewById(rootView, id);
      if (storeNameText == null) {
        break missingId;
      }

      id = R.id.tvOrderName;
      TextView tvOrderName = ViewBindings.findChildViewById(rootView, id);
      if (tvOrderName == null) {
        break missingId;
      }

      return new ItemOrderBinding((LinearLayout) rootView, orderAmountText, orderDateText,
          orderImage, orderMenuText, storeNameText, tvOrderName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
